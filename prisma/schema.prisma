// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  resumes       Resume[]
  coverLetters  CoverLetter[]
  contacts      Contact[]
  applications  JobApplication[]
  learningPaths LearningPath[]
}

model Profile {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  headline        String?
  summary         String?  @db.Text
  location        String?
  skills          String[]
  experience      Json[]
  education       Json[]
  certifications  Json[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Resume {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  content     Json
  template    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CoverLetter {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  content     String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Contact {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name              String
  email             String?
  phone             String?
  company           String?
  title             String?
  notes             String?  @db.Text
  relationship_score Int?     @default(50)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  applications      JobApplication[]
}

model JobApplication {
  id                  String    @id @default(cuid())
  userId              String
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobTitle            String
  company             String
  location            String?
  status              String    @default("applied")
  appliedDate         DateTime  @default(now())
  contactId           String?
  contact             Contact?  @relation(fields: [contactId], references: [id])
  resumeId            String?
  coverLetterId       String?
  notes               String?   @db.Text
  nextSteps           String?
  communicationHistory Json[]   @default([])
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model LearningPath {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?  @db.Text
  skillGaps   Json    @default("[]")
  resources   Json    @default("[]")
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
